const Parser = require("tree-sitter");
const Elm = require("tree-sitter-elm");
const fs = require("fs");
const path = require("path");

const parser = new Parser();
parser.setLanguage(Elm);

function sourceToIdentifiers(source, identifierSet = new Set()) {
  const tree = parser.parse(source);
  tree.rootNode
    .descendantsOfType(["field_type", "field"])
    .flatMap((f) => f.descendantsOfType(["lower_case_identifier"]))
    .forEach((identifier) => {
      identifierSet.add(identifier.text);
    });
  return identifierSet;
}

const moduleDeclaration = `-- This module is generated by \`setem\` command. DO NOT edit manually!


module RecordSetter exposing (..)
`;

function setterDefinition(recordFieldIdentifier) {
  return `s_${recordFieldIdentifier} : a -> { b | ${recordFieldIdentifier} : a } -> { b | ${recordFieldIdentifier} : a }
s_${recordFieldIdentifier} value record =
    { record | ${recordFieldIdentifier} = value }
`;
}

const cwd = process.cwd();
function reducePerFile(identifierSet, filepath) {
  const abspath = path.resolve(cwd, filepath);
  const source = fs.readFileSync(abspath, { encoding: "utf8" });
  return sourceToIdentifiers(source, identifierSet);
}

function generate(filepaths = []) {
  const uniqIdentifiers = [filepaths].flat().reduce(reducePerFile, new Set());
  const sortedUniqIdentifiers = [...uniqIdentifiers].sort();
  const setters = sortedUniqIdentifiers.map(setterDefinition);
  return [moduleDeclaration, ...setters].join("\n\n");
}

module.exports = generate;
